#include<bits/stdc++.h>
using namespace std;

#ifdef _WIN32
#define CLEAR "cls"
#else
  #define CLEAR "clear"
#endif

#define INF 1e9
void clearScreen() {
    system(CLEAR);
}


void printTable(const vector<vector<int>>& dp, int n, int amount, int highlight_i = -1, int highlight_j = -1) {

   clearScreen();
     cout<<"Dynamic Programming Table For Minimum Coin Change"<<endl;
     cout<<"-------------------------------------------------"<<endl;
     cout<<endl;
    cout << "      ";

    for (int j = 0; j <= amount; j++) {
        cout << setw(4) << j;
    }
    cout << "\n\t ";
    for (int j = 0; j <= amount; j++) {
        cout << "----";
    }
    cout << "\n";

    for (int i = 0; i <= n; i++) {
        cout << "C" << i << " |  ";
        for (int j = 0; j <= amount; j++) {
            if (dp[i][j] == INF) {
                cout << setw(4) << "INF";
            } else if (i == highlight_i && j == highlight_j) {
                cout << "[" << setw(3) << dp[i][j] << "]";
            } else {
                cout << setw(4) << dp[i][j];
            }
        }
        cout << "\n";
    }
    cout << "\n";
}

void MinCoins(int coin[], int amount, int n) {

    vector<vector<int>> dp(n + 1, vector<int>(amount + 1, INF));
    vector<vector<int>> choice(n + 1, vector<int>(amount + 1, -1));

    for (int i = 0; i <= n; i++) {
        dp[i][0] = 0;
    }

    int delay = 200;

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= amount; j++) {
            if (coin[i - 1] <= j) {
                if (dp[i - 1][j] <= 1 + dp[i][j - coin[i - 1]]) {
                    dp[i][j] = dp[i - 1][j];
                } else {
                    dp[i][j] = 1 + dp[i][j - coin[i - 1]];
                    choice[i][j] = coin[i - 1];
                }
            } else {
                dp[i][j] = dp[i - 1][j];
            }

            printTable(dp, n, amount, i, j);
            cout << "Calculating dp[" << i << "][" << j << "]\n";
            this_thread::sleep_for(chrono::milliseconds(delay));
        }
    }


    printTable(dp, n, amount);

    if (dp[n][amount] == INF ) {
        cout << "No solution possible for amount " << amount << " with given coins.\n";
    }

        else   {
        cout << "Minimum coins needed to make " << amount << ": " << dp[n][amount] << "\n";

        vector<int> coinsUsed;
        int i = n, j = amount;
        while (j > 0 && i > 0) {
            if (choice[i][j] != -1) {
                coinsUsed.push_back(choice[i][j]);
                j -= choice[i][j];
            } else {
                i--;
            }
        }

        cout << "One possible way to obtain "<<amount<<" "<<"by using only"<<" "<<dp[n][amount]<<" "<<"coin:"<<" ";
        for (int coin : coinsUsed) {
            cout << coin << " ";
        }
        cout << "\n";
    }

}

int main() {

    int coin[] = {1,2,3,5,4,6};
    int amount = 9;
    int n = sizeof(coin) / sizeof(coin[0]);
    MinCoins(coin, amount, n);
    return 0;
}